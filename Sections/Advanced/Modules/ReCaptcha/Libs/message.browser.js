'use strict'; // code generated by pbf v3.2.1

// Message ========================================

var Message = self.Message = {};

Message.read = function (pbf, end) {
    // Start with empty object - will be populated dynamically based on actual fields present
    return pbf.readFields(Message._readField, {}, end);
};
Message._readField = function (tag, obj, pbf) {
    // Dynamically create field names based on tag number
    // Pad with leading zero for single digits (field_01, field_02, etc.)
    var fieldName = 'field_' + (tag < 10 ? '0' + tag : tag);

    // Read as string (most common type in reCAPTCHA protobuf)
    obj[fieldName] = pbf.readString();
};
Message.write = function (obj, pbf) {
    // Dynamically write all fields present in the object
    for (var key in obj) {
        if (obj.hasOwnProperty(key) && key.startsWith('field_')) {
            // Extract field number from field name (e.g., "field_08" -> 8)
            var fieldNum = parseInt(key.replace('field_', ''), 10);
            if (!isNaN(fieldNum) && obj[key]) {
                pbf.writeStringField(fieldNum, obj[key]);
            }
        }
    }
};
